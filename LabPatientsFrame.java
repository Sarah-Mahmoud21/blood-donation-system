/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import Database.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JOptionPane;
/**
 *
 * @author Sara
 */
public class LabPatientsFrame extends javax.swing.JFrame {

    /**
     * Creates new form LabPatientsFrae
     */
    public LabPatientsFrame() {
        initComponents();
        this.setDefaultCloseOperation(LabPatientsFrame.HIDE_ON_CLOSE);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxtLP_PID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jcobLP_bloodType = new javax.swing.JComboBox<>();
        jbtnLP_Submit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setForeground(new java.awt.Color(0, 153, 153));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Patients Test");
        jLabel1.setToolTipText("");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 204));
        jLabel6.setText("ACCORDING TO THE TESTS FILL IN THE FOLLOWING:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter Patient's ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Choose The proper Blood Type:");

        jcobLP_bloodType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "A-", "AB+", "AB-", "B+", "B-", "O+", "O-" }));
        jcobLP_bloodType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcobLP_bloodTypeActionPerformed(evt);
            }
        });

        jbtnLP_Submit.setText("Submit");
        jbtnLP_Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLP_SubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jtxtLP_PID, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcobLP_bloodType, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 26, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jbtnLP_Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxtLP_PID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcobLP_bloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jbtnLP_Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jcobLP_bloodTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcobLP_bloodTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcobLP_bloodTypeActionPerformed

    private void jbtnLP_SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLP_SubmitActionPerformed
        this.Initializer();
        if(EM.createNamedQuery("Patients.findByPid").setParameter("pid", this.jtxtLP_PID.getText()).getResultList().size() > 0){
            String BloodType = this.jcobLP_bloodType.getSelectedItem().toString();
            String LID;
            LID = ("L"+(1+Integer.parseInt(EM.createNamedQuery("Lab.findNewLID").getResultList().get(0).toString())));
            EM.getTransaction().begin();
            this.tempLab.setBloodtype(BloodType);
            this.tempLab.setHealthcond("Sick");
            this.tempLab.setLabrid(null);
            this.tempLab.setLid(LID);
            EM.persist(this.tempLab);
            EM.getTransaction().commit();
            char tempChar='-';
            String tempType="";
            for(int i=0;i<BloodType.length();i++){
                if(BloodType.charAt(i) == '+' || BloodType.charAt(i) == '-'){
                    tempChar=BloodType.charAt(i);
                    break;
                }
                else
                    tempType+=BloodType.charAt(i);
            }
            EM.getTransaction().begin();
            EM.clear();
            GiveBloodFrame tempBloodFrame = new GiveBloodFrame();
            for(Nurses N: (List<Nurses>) EM.createNamedQuery("Nurses.findAll").getResultList()){
                tempBloodFrame.jcobGB_Nurses.addItem(N.getNursename());
            }
            if(tempType.equals("AB")) {
                tempBloodFrame.jcobGB_Units.removeAllItems();
                int counter;
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "A-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "A-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("A- #"+counter+" Units");
                }
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "B-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "B-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("B- #"+counter+" Units");
                }
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "AB-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "AB-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("AB- #"+counter+" Units");
                }
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "O-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "O-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("O- #"+counter+" Units");
                }
                if(tempChar == '+'){
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "A+").getResultList().size() > 0){
                            counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "A+").getResultList().get(0).toString());
                            if(counter > 0)
                                tempBloodFrame.jcobGB_Units.addItem("A+ #"+counter+" Units");
                    }
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "B+").getResultList().size() > 0){
                        counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "B+").getResultList().get(0).toString());
                        if(counter > 0)
                            tempBloodFrame.jcobGB_Units.addItem("B+ #"+counter+" Units");
                    }
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "AB+").getResultList().size() > 0){
                        counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "AB+").getResultList().get(0).toString());
                        if(counter > 0)
                            tempBloodFrame.jcobGB_Units.addItem("AB+ #"+counter+" Units");
                    }
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "O+").getResultList().size() > 0){
                        counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "O+").getResultList().get(0).toString());
                        if(counter > 0)
                            tempBloodFrame.jcobGB_Units.addItem("O+ #"+counter+" Units");
                    }
                }
                if(tempBloodFrame.jcobGB_Units.getItemCount() == 0 || tempBloodFrame.jcobGB_Nurses.getItemCount() == 0){
                    JOptionPane.showMessageDialog(null, "No available units, or no available Nurses!");
                    this.dispose();
                    return;
                }
                tempBloodFrame.setVisible(true);
            }
            else if(tempType.equals("A")) {
                tempBloodFrame.jcobGB_Units.removeAllItems();
                int counter;
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "A-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "A-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("A- #"+counter+" Units");
                }
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "O-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "O-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("O- #"+counter+" Units");
                }
                if(tempChar == '+'){
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "A+").getResultList().size() > 0){
                            counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "A+").getResultList().get(0).toString());
                            if(counter > 0)
                                tempBloodFrame.jcobGB_Units.addItem("A+ #"+counter+" Units");
                    }
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "O+").getResultList().size() > 0){
                        counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "O+").getResultList().get(0).toString());
                        if(counter > 0)
                            tempBloodFrame.jcobGB_Units.addItem("O+ #"+counter+" Units");
                    }
                }
                if(tempBloodFrame.jcobGB_Units.getItemCount() == 0 || tempBloodFrame.jcobGB_Nurses.getItemCount() == 0){
                    JOptionPane.showMessageDialog(null, "No available units, or no available Nurses!");
                    this.dispose();
                    return;
                }
                tempBloodFrame.setVisible(true);
                
            }
            else if(tempType.equals("B")) {
                tempBloodFrame.jcobGB_Units.removeAllItems();
                int counter;
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "B-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "B-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("B- #"+counter+" Units");
                }
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "O-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "O-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("O- #"+counter+" Units");
                }
                if(tempChar == '+'){
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "B+").getResultList().size() > 0){
                        counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "B+").getResultList().get(0).toString());
                        if(counter > 0)
                            tempBloodFrame.jcobGB_Units.addItem("B+ #"+counter+" Units");
                    }
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "O+").getResultList().size() > 0){
                        counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "O+").getResultList().get(0).toString());
                        if(counter > 0)
                            tempBloodFrame.jcobGB_Units.addItem("O+ #"+counter+" Units");
                    }
                }
                if(tempBloodFrame.jcobGB_Units.getItemCount() == 0 || tempBloodFrame.jcobGB_Nurses.getItemCount() == 0){
                    JOptionPane.showMessageDialog(null, "No available units, or no available Nurses!");
                    this.dispose();
                    return;
                }
                tempBloodFrame.setVisible(true);
            }
            else {
                tempBloodFrame.jcobGB_Units.removeAllItems();
                int counter;
                if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "O-").getResultList().size() > 0){
                    counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "O-").getResultList().get(0).toString());
                    if(counter > 0)
                        tempBloodFrame.jcobGB_Units.addItem("O- #"+counter+" Units");
                }
                if(tempChar == '+'){
                    if(EM.createNamedQuery("Bloodbank.findByBloodtype").setParameter("bloodtype", "O+").getResultList().size() > 0){
                        counter = Integer.parseInt(EM.createNamedQuery("Bloodbank.findCountForUnit").setParameter("bt", "O+").getResultList().get(0).toString());
                        if(counter > 0)
                            tempBloodFrame.jcobGB_Units.addItem("O+ #"+counter+" Units");
                    }
                }
                if(tempBloodFrame.jcobGB_Units.getItemCount() == 0 || tempBloodFrame.jcobGB_Nurses.getItemCount() == 0){
                    JOptionPane.showMessageDialog(null, "No available units, or no available Nurses!");
                    this.dispose();
                    return;
                }
                tempBloodFrame.setVisible(true);
            }
            this.dispose();
        }
        else{
            JOptionPane.showMessageDialog(null, "Please enter valid Patient ID");
        }
    }//GEN-LAST:event_jbtnLP_SubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LabPatientsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LabPatientsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LabPatientsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LabPatientsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LabPatientsFrame().setVisible(true);
            }
        });
    }
    public void Initializer(){
        	emf = Persistence.createEntityManagerFactory("com.mycompany_BloodDonationProgram_jar_1.0-SNAPSHOTPU");
        	EM = emf.createEntityManager();
        	tempDonator=new Donators();
        	tempReception = new Reception();
        	tempPatient=new Patients();
        	tempNurse = new Nurses();
        	tempLab = new Lab();
        	tempBloodbank = new Bloodbank();
     	}
    public EntityManagerFactory emf;
    public EntityManager EM;
    public Donators tempDonator;
    public Reception tempReception;
    public Patients tempPatient;
    public Nurses tempNurse;
    public Lab tempLab;
    public Bloodbank tempBloodbank;
    public Query tempQuery;
    public int countNewDID_DRegister,countNewRID;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtnLP_Submit;
    private javax.swing.JComboBox<String> jcobLP_bloodType;
    private javax.swing.JTextField jtxtLP_PID;
    // End of variables declaration//GEN-END:variables
}
